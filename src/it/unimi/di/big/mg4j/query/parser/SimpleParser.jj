options {
	STATIC = false;
	UNICODE_INPUT = true;
}

PARSER_BEGIN(SimpleParser)

	package it.unimi.di.big.mg4j.query.parser;
	import it.unimi.di.big.mg4j.index.*;
	import it.unimi.di.big.mg4j.query.nodes.*;
	import it.unimi.dsi.lang.*;
	import it.unimi.dsi.fastutil.objects.*;
	import it.unimi.dsi.fastutil.ints.*;
	import java.util.*;

/*		 
 * MG4J: Managing Gigabytes for Java (big)
 *
 * Copyright (C) 2006-2015 Paolo Boldi and Sebastiano Vigna
 *
 *  This library is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU Lesser General Public License as published by the Free
 *  Software Foundation; either version 3 of the License, or (at your option)
 *  any later version.
 *
 *  This library is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
 *  for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program; if not, see <http://www.gnu.org/licenses/>.
 *
 */


/** A simple parser that transform a query string into a {@linkplain it.unimi.di.big.mg4j.query.nodes query}. 
 *
 *  <P>The parser supports multiple indices. You must provide a set of 
 *  <em>index aliases</em> that the user will use to select indices, and the name of the default index
 *  alias to be used. After that, you parse a query by using the {@link #parse(String)} method.
 *
 * <P>The parser generated by JavaCC for this class will break terms using operators and
 * nonspace-to-space transitions. Operators can be included in terms, if needed, using
 * the backslash, which acts as an escape character, and makes the next character 
 * (usually an operator) a standard character. The syntax of the parser can be seen in action
 * in the documentation of the package {@link it.unimi.di.big.mg4j.search}.
 * 
 * <P>The parser returns a {@link it.unimi.di.big.mg4j.query.nodes.Query}&mdash;an abstract
 * representation of the query string that can be turned later into a 
 * {@link it.unimi.di.big.mg4j.search.DocumentIterator}.
 *
 * <P>If a {@link TermProcessor} is specified, it will be applied to the terms found in the
 * query string. This can lead to transformations (e.g., downcasing) or generate an exception
 * if the query string contains terms filtered by the term processor.
 *
 * @author Sebastiano Vigna
 * @author Paolo Boldi
 * @since 1.0.1
 *
 */

@SuppressWarnings("unused")
public class SimpleParser implements QueryParser {
	    /** The set of index aliases. */
		public Set<String> indices;
		/** The default index alias. */
		public String defaultIndex;
		/** The term processor for each index. */
		public Map<String,? extends TermProcessor> termProcessors;
		/** The query visitor used to check for Select nodes. */
		private CheckForSelectQueryVisitor visitor;

		private final static boolean DEBUG = false;

	    /** Creates a parser. 
	     *
	     *   @param indices the set of index aliases.
	     *   @param defaultIndex the default index alias to be used when parsing the query.
	     *   @param termProcessors a map from index aliases to the corresponding term processor, or <code>null</code>
	     *		for no term processing.
	     */
	    public SimpleParser( final Set<String> indices, final String defaultIndex, final Map<String,? extends TermProcessor> termProcessors ) {
			this( new java.io.StringReader( "" ) ); // Just for initialization purposes...
			this.indices = indices;
	    	this.defaultIndex = defaultIndex;
	    	this.termProcessors = termProcessors;
	    	this.visitor = new CheckForSelectQueryVisitor( defaultIndex );
	    }

	    /** Creates a parser with no term processing.
	     *
	     *   @param indices the set of index aliases.
	     *   @param defaultIndex the default index alias to be used when parsing the query.
	     */
	    public SimpleParser( final Set<String> indices, final String defaultIndex ) {
			this( indices, defaultIndex, null );
	    }

	    /** Creates a parser for a single nameless index with no term processing.
		 *
		 *  <P>Parsers created by this constructor allow only nameless access,
		 *  both in the query and in the interval-iterator methods.
	     */
	    public SimpleParser() {
			this( ObjectSets.singleton( "" ), "" );
	    }

	    /** Creates a parser for a single nameless index with a given term processor.
		 *
		 *  <P>Parsers created by this constructor allow only nameless access,
		 *  both in the query and in the interval-iterator methods.
	     */
	    public SimpleParser( final TermProcessor termProcessor ) {
			this( ObjectSets.singleton( "" ), "", Object2ObjectMaps.singleton( "", termProcessor ) );
	    }
	    
	    public SimpleParser copy() {
	    	return new SimpleParser( indices, defaultIndex, termProcessors );
	    }

		// WARNING: these arrays must be kept in sync with the grammar!

		private final char[] SPECIAL_CHARACTER = 
 			new char[]		{ ' ',   '&',   '$',   '<',   '|',   '!',   '(',   ')',   '{',   '}',   '[',   ']',   ',',   '\"',   ':',   '~',   '#',   '-',   '+',   '*',   '\\',   '^',   '\u2227',   '\u2228',   '\u22A4',   '\u22A5', }; 
 		private final String[] SPECIAL_CHARACTER_REPLACEMENT = 
			new String[]	{ "\\ ", "\\&", "\\$", "\\<", "\\|", "\\!", "\\(", "\\)", "\\{", "\\}", "\\[", "\\]", "\\,", "\\\"", "\\:", "\\~", "\\#", "\\-", "\\+", "\\*", "\\\\", "\\^", "\\\u2227", "\\\u2228", "\\\u22A4", "\\\u22A5", }; 
           
		public String escape( final String token ) {
			return new MutableString( token ).replace( SPECIAL_CHARACTER, SPECIAL_CHARACTER_REPLACEMENT ).toString();
		}

		public MutableString escape( final MutableString token ) {
			return token.replace( SPECIAL_CHARACTER, SPECIAL_CHARACTER_REPLACEMENT );
		}
	     public Query parse( final String text ) throws QueryParserException {
	   		
			ReInit( new java.io.StringReader( text ) );
			
			try {
				final Query query = query( defaultIndex );
				
				try {
					visitor.prepare();
					if ( query.accept( visitor ) == null ) throw new ParseException( visitor.errorMessage );
				}
				catch( QueryBuilderVisitorException e ) {}
				return query;
			}
			catch( ParseException e ) {
				throw new QueryParserException( e );
			}
	   }
	   
	   public Query parse( final MutableString text ) throws QueryParserException {
	   		
			ReInit( new java.io.CharArrayReader( text.array(), 0, text.length() ) );
			
			try {
				final Query query = query( defaultIndex );
				
				try {
					visitor.prepare();
					if ( query.accept( visitor ) == null ) throw new ParseException( visitor.errorMessage );
				}
				catch( QueryBuilderVisitorException e ) {}
				return query;
			}
			catch( ParseException e ) {
				throw new QueryParserException( e );
			}
	   }
	}

PARSER_END(SimpleParser)

/** Lexer. */

// WARNING: this grammar must be kept in sync with the SPECIAL_CHARACTERS array!

// This stuff separates terms
SKIP: { " " | "\t" | "\n" | "\r" }

// Operators
TOKEN: { < AND: "AND" | "&" | "\u2227" > }
TOKEN: { < OAND: "<"  > }
TOKEN: { < OR: "OR" | "|" | "\u2228" > }
TOKEN: { < NOT: "NOT" | "!" > }
TOKEN: { < ALIGN: "^" > }
TOKEN: { < OPEN_PAREN: "(" > }
TOKEN: { < CLOSE_PAREN: ")" > }
TOKEN: { < OPEN_RANGE: "[" > }
TOKEN: { < CLOSE_RANGE: "]" > } // Brokeback Mountain
TOKEN: { < OPEN_WEIGHT: "{" > }
TOKEN: { < CLOSE_WEIGHT: "}" > }
TOKEN: { < OPEN_REMAP: "{{" > }
TOKEN: { < CLOSE_REMAP: "}}" > }
TOKEN: { < RIGHTARROW: "->" | "\u2192" > }
TOKEN: { < LEFTARROW: "<-" | "\u2190" > }
TOKEN: { < OPEN_ENLARGE: "[[" > }
TOKEN: { < CLOSE_ENLARGE: "]]" > }
TOKEN: { < ANNO: "//" > }
TOKEN: { < QUOTE: "\"" > }
TOKEN: { < COLON: ":" > }
TOKEN: { < SEMICOLON: ";" > }
TOKEN: { < TILDA: "~" > }
TOKEN: { < PLUS: "+" > }
TOKEN: { < MINUS: "-" > }
TOKEN: { < SHARP: "#" > } 
TOKEN: { < TRUE: "#TRUE" | "\u22A4" > } 
TOKEN: { < FALSE: "#FALSE" |  "\u22A5" > } 
TOKEN: { < PREFIX: "*" > } 
TOKEN: { < HOLE: "$" > } 
TOKEN: { < INTERVAL_SEPARATOR: ".." > }

/* A word is a sequence of word characters (non-operator and non-control characters) 
 * and escaped characters (anything prefixed with a backslash). Note that it would
 * be nice to use a separate token for these two classes of characters, but then
 * JavaCC refuses to recognize words made by one character (a bug? a feature?). */
 
TOKEN:	{	< WORD: ( 
						( ~[ "&", "$", "<", "|", "!", "(", ")", "{", "}", "[", "]", ",", "\"", ";", ":", "~", "#", "-", "+", "*", "\\", "^", "\u0000"-"\u0020", "\u2227", "\u2228", "\u22A4", "\u22A5", "\u2190", "\u2192" ] )
					|	( "\\" ~["\u0000"-"\u001F"] ) 
					)+ 
			> 
		}


/** Parser. */

Query query( String indexAlias ) :
{
	Query query;
}
{	
	query = remappedQuery( indexAlias )
	<EOF>
	{
		return query;
	}
}

/** Starting rule for a remapped query. 
 *   @param indexAlias the index alias for the default index to be used for the query that is going to be parsed.
 *   @return the result of the query.
 */
Query remappedQuery( String indexAlias ):
{ 
	Query query;
	Token external, internal;
	ArrayList<String> externalIndices = new ArrayList<String>(), internalIndices = new ArrayList<String>();
}
{
	query = inclusionContainmentQuery( indexAlias )
	[   <OPEN_REMAP>
		{ if ( DEBUG ) System.err.println( "Building remapped query" ); }
		internal = <WORD>  <RIGHTARROW> external = <WORD> 
		{
			internalIndices.add( internal.toString() );
			externalIndices.add( external.toString() );
		}
		( 
			<SEMICOLON>
			internal = <WORD>  <RIGHTARROW> external = <WORD> 
			{
				internalIndices.add( internal.toString() );
				externalIndices.add( external.toString() );
			}
		)* 
		<CLOSE_REMAP>
	]
	{ 
		if ( externalIndices.isEmpty() ) return query;
		return new Remap( query, internalIndices.toArray( new String[ internalIndices.size() ] ), externalIndices.toArray( new String[ externalIndices.size() ] ) );
	}
}



/** Starting rule for an inclusion/containment query. 
 *   @param indexAlias the index alias for the default index to be used for the query that is going to be parsed.
 *   @return the result of the query.
 */
Query inclusionContainmentQuery( String indexAlias ):
{ 
	Query first, second = null;
	boolean inclusion = true;
	Token leftMargin = null, rightMargin = null;
}
{
	first = differenceQuery( indexAlias )
	[ 
		(
			<RIGHTARROW>
				{ if ( DEBUG ) System.err.println( "Building inclusion query" ); }
			|
			<LEFTARROW>
				{ inclusion = false; if ( DEBUG ) System.err.println( "Building containment query" ); }
		)
		[ <OPEN_ENLARGE> leftMargin = <WORD> <COLON> rightMargin = <WORD> <CLOSE_ENLARGE> ]
		{ second = differenceQuery( indexAlias ); }
	]
	{ 
		if ( second == null ) return first;
		return inclusion 
			? new Inclusion( first, second, leftMargin == null ? 0 : Integer.parseInt( leftMargin.image ), rightMargin == null ? 0 : Integer.parseInt( rightMargin.image ) )
			: new Containment( first, second, leftMargin == null ? 0 : Integer.parseInt( leftMargin.image ), rightMargin == null ? 0 : Integer.parseInt( rightMargin.image ) );
	}
}


/** Starting rule for a difference query. 
 *   @param indexAlias the index alias for the default index to be used for the query that is going to be parsed.
 *   @return the result of the query.
 */
Query differenceQuery( String indexAlias ):
{ 
	Query minuend, subtrahend = null;
	Token leftMargin = null, rightMargin = null;
}
{
	minuend = orQuery( indexAlias )
	[ <MINUS>
		{ if ( DEBUG ) System.err.println( "Building difference query" ); }
		[ <OPEN_ENLARGE> leftMargin = <WORD> <COLON> rightMargin = <WORD> <CLOSE_ENLARGE> ]
		{ subtrahend = orQuery( indexAlias ); }
	]
	{ 
		if ( subtrahend == null ) return minuend;
		return new Difference( minuend, subtrahend, leftMargin == null ? 0 : Integer.parseInt( leftMargin.image ), rightMargin == null ? 0 : Integer.parseInt( rightMargin.image ) );
	}
}

/** Starting rule for a OR-query. 
 *   @param indexAlias the index alias for the default index to be used for the query that is going to be parsed.
 *   @return the result of the query.
 */
Query orQuery( String indexAlias ):
{ 
	Query res;
	ObjectArrayList<Query> qrm = new ObjectArrayList<Query>(); 
}
{
	res = orderedAndQuery( indexAlias )
	{ qrm.add( res ); }
	(
		<OR>
		{ if ( DEBUG ) System.err.println( "Building OR query" ); }
		res = orderedAndQuery( indexAlias )
		{   qrm.add( res ); }
	)*	
	{ 
		if ( qrm.size() == 1 ) return res;
		return new Or( qrm.toArray( Queries.EMPTY_ARRAY ) );
	}
}

/** Starting rule for an AND-query (the AND token is optional). 
 *   @param indexAlias the index alias for the default index to be used for the query that is going to be parsed.
 *   @return the result of the query.
 */
Query andQuery( String indexAlias ):
{ 
	Query res;
	ObjectArrayList<Query> qrm = new ObjectArrayList<Query>(); 
}
{
	res = multiTermQuery( indexAlias )
	{ if ( DEBUG ) System.err.println( "Building AND query: " + res ); }
	{ qrm.add( res ); }
	(
		[ <AND> ]
		res = multiTermQuery( indexAlias )
		{ if ( DEBUG ) System.err.println( "Building AND query: " + res ); }
		{ qrm.add( res ); }
	)*	
	{ 
		if ( qrm.size() == 1 ) return res;
		return new And( qrm.toArray( Queries.EMPTY_ARRAY ) );
	}
}

/** Starting rule for an AND<-query. 
 *   @param indexAlias the index alias for the default index to be used for the query that is going to be parsed.
 *   @return the result of the query.
 */

Query orderedAndQuery( String indexAlias ):
{ 
	Query res;
	ObjectArrayList<Query> qrm = new ObjectArrayList<Query>(); 
}
{
	res = alignQuery( indexAlias )
	{ if ( DEBUG ) System.err.println( "Building AND< query: " + res ); }
	{ qrm.add( res ); }
	(
		<OAND>
		res = alignQuery( indexAlias )
		{ if ( DEBUG ) System.err.println( "Building AND< query: " + res ); }
		{ qrm.add( res ); }
	)*	
	{ 
		if ( qrm.size() == 1 ) return res;
		return new OrderedAnd( qrm.toArray( Queries.EMPTY_ARRAY ) );
	}
}

/** Starting rule for an alignment query. 
 *   @param indexAlias the index alias for the default index to be used for the query that is going to be parsed.
 *   @return the result of the query.
 */

Query alignQuery( String indexAlias ):
{ 
	Query alignee, aligner = null; 
}
{
	alignee = andQuery( indexAlias )
	[
		<ALIGN>
		{ if ( DEBUG ) System.err.println( "Building aligned query: " + alignee ); }
		aligner = andQuery( indexAlias )
	]	
	{ 
		if ( aligner == null ) return alignee;
		return new Align( alignee, aligner );
	}
}

/** Starting rule for a multiterm query. 
 *   @param indexAlias the index alias for the default index to be used for the query that is going to be parsed.
 *   @return the result of the query.
 */

Query multiTermQuery( String indexAlias ):
{ 
	Query res;
	ObjectArrayList<Query> qrm = new ObjectArrayList<Query>();
}
{
	res = atomicQuery( indexAlias )
	{ if ( DEBUG ) System.err.println( "Building multiterm query: " + res ); }
	{ qrm.add( res ); }
	(
		<PLUS>
		{ if ( qrm.size() == 1 && ! ( res instanceof Term ) && ! ( ( res instanceof Weight ) && ( ((Weight)res).query instanceof Term ) ) ) throw new ParseException("Expecting a term instead of " + res ); }
		res = atomicQuery( indexAlias )
		{ if ( DEBUG ) System.err.println( "Building multiterm query: " + res ); }
		{ if ( ! ( res instanceof Term ) && ! ( ( res instanceof Weight ) && ( ((Weight)res).query instanceof Term ) ) ) throw new ParseException("Expecting a term instead of " + res ); qrm.add( res ); }
	)*	
	{ 
		if ( qrm.size() == 1 ) return res;
		return new MultiTerm( qrm.toArray( new Query[ qrm.size() ] ) );
	}
}

/** Starting rule for a quoted query. Subqueries cannot change index.
 *   @param indexAlias the index alias for the default index to be used for the query that is going to be parsed.
 *   @return the result of the query.
 */
Query quotedQuery( String indexAlias ):
{ 
	Query res = null;
	ObjectArrayList<Query> qrm = new ObjectArrayList<Query>(); 
	IntArrayList gaps = new IntArrayList();
	int gap = 0; boolean holeSeen = false;
}
{
	<QUOTE>
	(
		res = atomicSimpleQuery( indexAlias )
		{ qrm.add( res ); gaps.add( gap ); gap = 0; }
	
		|
	
		<HOLE>
		
		{ gap++; holeSeen = true; }
	)
	
	(
		res = atomicSimpleQuery( indexAlias )
		{ qrm.add( res ); gaps.add( gap ); gap = 0; }
		
		|
		
		<HOLE>
		
		{ gap++; holeSeen = true; }
		
	)*	
	<QUOTE>
	{ 
		if ( gap > 0 ) gaps.add( gap );
		if ( qrm.size() == 1 && ! holeSeen ) {
			if ( res == null ) throw new ParseException( "You must specify at least one term within quotes" );
			return res;
		}
		return new Consecutive( qrm.toArray( Queries.EMPTY_ARRAY ), holeSeen ? gaps.toIntArray() : null );
	}
}

/** Starting rule for an atomic query. May be either an atomic simple query or a
 *   quoted query. It can optionally contain an index selector and
 *   a low-pass limit.
 *   @param indexAlias the index alias for the default index to be used for the query that is going to be parsed.
 *   @return the result of the query.
 */
Query atomicQuery( String indexAlias ):
{
	Query res;
	Token t;
	String newIndexAlias = indexAlias;
	boolean negative = false, annotation = false;
}
{
	[
		<NOT>
		{ negative = true; }
	]
	[
		<ANNO>
		{ annotation = true; }
	]
	[
		LOOKAHEAD(2)
		t = <WORD>
		{ 
			newIndexAlias = t.image; 
		}
		<COLON>
	]
	(
	res = atomicSimpleQuery( newIndexAlias ) 
	|
	res = quotedQuery( newIndexAlias )
	)
	{
		if ( negative && annotation ) throw new ParseException( "You cannot negate annotations" );
		if ( negative ) res = new Not( res ); 
		if ( annotation ) res = new Annotation( res ); 
		if ( newIndexAlias != indexAlias ) res = new Select( newIndexAlias, res );
	}
	[
		<TILDA>
		t = <WORD>
		{
			int limit = 0;
			try {
				limit = Integer.parseInt( t.image );
				if ( limit <= 0 ) throw new NumberFormatException();
			} catch ( NumberFormatException e ) {
				throw new ParseException( "Expecting a positive number, found " + t.image + " instead" );
			}
			if ( DEBUG ) System.err.println( "Building low-pass filter with threshold " + limit );
			res = new LowPass( res, limit );
		}
	]
	{
		return res;
	}
}

/** Starting rule for an atomic simple query. May be either a word or a query
 *   enclosed within parentheses.
 *   @param indexAlias the index alias for the default index to be used for the query that is going to be parsed.
 *   @return the result of the query.
 */
Query atomicSimpleQuery( String indexAlias ):
{
	Query res;
	Token t = null, s = null, p = null;
}
{
	(
	<TRUE> 
	{
		res = new True();
	}
	|
	<FALSE>
	{
		res = new False();
	}
	|
	[ s = <SHARP> ]
	t = <WORD>
	[ p = <PREFIX> ]
	{ 
		String word = t.image;

		if ( ! indices.contains( indexAlias ) ) throw new ParseException( "Index \"" + indexAlias + "\" does not exist" );

		if ( s != null && p != null ) throw new ParseException( s + " and " + p + " cannot be used at the same time" );

		final MutableString term = new MutableString();

		if ( s == null ) {
			// Before passing the word to anyone, we pass it through the index term processor.
			for( int i = 0; i < word.length(); i++ ) {
				if ( word.charAt( i ) == '\\' ) i++;
				term.append( word.charAt( i ) );
			}
			
			if ( p != null ) {
				if ( termProcessors != null && ! termProcessors.get( indexAlias ).processPrefix( term ) ) throw new ParseException( "Prefix " + term + " has not been indexed" );
			}
			else {
				if ( termProcessors != null && ! termProcessors.get( indexAlias ).processTerm( term ) ) throw new ParseException( "Term " + term + " has not been indexed" );
			}
		}

		if ( p == null ) {
			if ( s != null ) {
				try {
					res = new Term( Integer.parseInt( word ) );
				}
				catch( NumberFormatException e ) {
					throw new ParseException( "Malformed number: " + word );
				}
			}
			else res = new Term( term );
		}
		else {
			res = new Prefix( term );				
		}
	}
	|
	<OPEN_RANGE> [ s = <WORD> ] <INTERVAL_SEPARATOR> [ t = <WORD> ] <CLOSE_RANGE>
	{
		res = new Range( s != null ? s.toString() : null, t != null ? t.toString() : null );
	}
	|
	<OPEN_PAREN> res = remappedQuery( indexAlias ) <CLOSE_PAREN>
	)
	[ <OPEN_WEIGHT> t = <WORD> <CLOSE_WEIGHT>
	{
		double weight;
		try {
			weight = Double.parseDouble( t.image );
			if ( weight < 0 ) throw new NumberFormatException();
		} catch ( NumberFormatException e ) {
			throw new ParseException( "Expecting a nonnegative number, found " + t.image + " instead" );
		}
		if ( DEBUG ) System.err.println( "Building weight: " + weight );
		res = new Weight( weight, res );		
	}
	]
	{
		return res;
	}
}
